// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center_cluster.proto

#ifndef PROTOBUF_center_5fcluster_2eproto__INCLUDED
#define PROTOBUF_center_5fcluster_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "center_type.pb.h"
// @@protoc_insertion_point(includes)

namespace libevrpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_5fcluster_2eproto();
void protobuf_AssignDesc_center_5fcluster_2eproto();
void protobuf_ShutdownFile_center_5fcluster_2eproto();

class RpcClusterServer;
class CenterResponseCluster;

enum ClusteAction {
  REGISTER = 1,
  CLUSTER_PING = 2
};
bool ClusteAction_IsValid(int value);
const ClusteAction ClusteAction_MIN = REGISTER;
const ClusteAction ClusteAction_MAX = CLUSTER_PING;
const int ClusteAction_ARRAYSIZE = ClusteAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClusteAction_descriptor();
inline const ::std::string& ClusteAction_Name(ClusteAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClusteAction_descriptor(), value);
}
inline bool ClusteAction_Parse(
    const ::std::string& name, ClusteAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClusteAction>(
    ClusteAction_descriptor(), name, value);
}
enum ResponseClusterAction {
  CLUSTER_RESP = 1,
  CENTER_NOT_READY = 2
};
bool ResponseClusterAction_IsValid(int value);
const ResponseClusterAction ResponseClusterAction_MIN = CLUSTER_RESP;
const ResponseClusterAction ResponseClusterAction_MAX = CENTER_NOT_READY;
const int ResponseClusterAction_ARRAYSIZE = ResponseClusterAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseClusterAction_descriptor();
inline const ::std::string& ResponseClusterAction_Name(ResponseClusterAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseClusterAction_descriptor(), value);
}
inline bool ResponseClusterAction_Parse(
    const ::std::string& name, ResponseClusterAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseClusterAction>(
    ResponseClusterAction_descriptor(), name, value);
}
// ===================================================================

class RpcClusterServer : public ::google::protobuf::Message {
 public:
  RpcClusterServer();
  virtual ~RpcClusterServer();

  RpcClusterServer(const RpcClusterServer& from);

  inline RpcClusterServer& operator=(const RpcClusterServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcClusterServer& default_instance();

  void Swap(RpcClusterServer* other);

  // implements Message ----------------------------------------------

  RpcClusterServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcClusterServer& from);
  void MergeFrom(const RpcClusterServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .libevrpc.ClusteAction cluster_action = 1;
  inline bool has_cluster_action() const;
  inline void clear_cluster_action();
  static const int kClusterActionFieldNumber = 1;
  inline ::libevrpc::ClusteAction cluster_action() const;
  inline void set_cluster_action(::libevrpc::ClusteAction value);

  // optional string cluster_server_addr = 2;
  inline bool has_cluster_server_addr() const;
  inline void clear_cluster_server_addr();
  static const int kClusterServerAddrFieldNumber = 2;
  inline const ::std::string& cluster_server_addr() const;
  inline void set_cluster_server_addr(const ::std::string& value);
  inline void set_cluster_server_addr(const char* value);
  inline void set_cluster_server_addr(const char* value, size_t size);
  inline ::std::string* mutable_cluster_server_addr();
  inline ::std::string* release_cluster_server_addr();
  inline void set_allocated_cluster_server_addr(::std::string* cluster_server_addr);

  // optional uint32 load = 3;
  inline bool has_load() const;
  inline void clear_load();
  static const int kLoadFieldNumber = 3;
  inline ::google::protobuf::uint32 load() const;
  inline void set_load(::google::protobuf::uint32 value);

  // optional float cpu_used = 4;
  inline bool has_cpu_used() const;
  inline void clear_cpu_used();
  static const int kCpuUsedFieldNumber = 4;
  inline float cpu_used() const;
  inline void set_cpu_used(float value);

  // optional int32 connection_num = 5;
  inline bool has_connection_num() const;
  inline void clear_connection_num();
  static const int kConnectionNumFieldNumber = 5;
  inline ::google::protobuf::int32 connection_num() const;
  inline void set_connection_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:libevrpc.RpcClusterServer)
 private:
  inline void set_has_cluster_action();
  inline void clear_has_cluster_action();
  inline void set_has_cluster_server_addr();
  inline void clear_has_cluster_server_addr();
  inline void set_has_load();
  inline void clear_has_load();
  inline void set_has_cpu_used();
  inline void clear_has_cpu_used();
  inline void set_has_connection_num();
  inline void clear_has_connection_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cluster_server_addr_;
  int cluster_action_;
  ::google::protobuf::uint32 load_;
  float cpu_used_;
  ::google::protobuf::int32 connection_num_;
  friend void  protobuf_AddDesc_center_5fcluster_2eproto();
  friend void protobuf_AssignDesc_center_5fcluster_2eproto();
  friend void protobuf_ShutdownFile_center_5fcluster_2eproto();

  void InitAsDefaultInstance();
  static RpcClusterServer* default_instance_;
};
// -------------------------------------------------------------------

class CenterResponseCluster : public ::google::protobuf::Message {
 public:
  CenterResponseCluster();
  virtual ~CenterResponseCluster();

  CenterResponseCluster(const CenterResponseCluster& from);

  inline CenterResponseCluster& operator=(const CenterResponseCluster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CenterResponseCluster& default_instance();

  void Swap(CenterResponseCluster* other);

  // implements Message ----------------------------------------------

  CenterResponseCluster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CenterResponseCluster& from);
  void MergeFrom(const CenterResponseCluster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .libevrpc.ResponseClusterAction center_response_action = 1;
  inline bool has_center_response_action() const;
  inline void clear_center_response_action();
  static const int kCenterResponseActionFieldNumber = 1;
  inline ::libevrpc::ResponseClusterAction center_response_action() const;
  inline void set_center_response_action(::libevrpc::ResponseClusterAction value);

  // repeated string should_reporter_center = 2;
  inline int should_reporter_center_size() const;
  inline void clear_should_reporter_center();
  static const int kShouldReporterCenterFieldNumber = 2;
  inline const ::std::string& should_reporter_center(int index) const;
  inline ::std::string* mutable_should_reporter_center(int index);
  inline void set_should_reporter_center(int index, const ::std::string& value);
  inline void set_should_reporter_center(int index, const char* value);
  inline void set_should_reporter_center(int index, const char* value, size_t size);
  inline ::std::string* add_should_reporter_center();
  inline void add_should_reporter_center(const ::std::string& value);
  inline void add_should_reporter_center(const char* value);
  inline void add_should_reporter_center(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& should_reporter_center() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_should_reporter_center();

  // @@protoc_insertion_point(class_scope:libevrpc.CenterResponseCluster)
 private:
  inline void set_has_center_response_action();
  inline void clear_has_center_response_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> should_reporter_center_;
  int center_response_action_;
  friend void  protobuf_AddDesc_center_5fcluster_2eproto();
  friend void protobuf_AssignDesc_center_5fcluster_2eproto();
  friend void protobuf_ShutdownFile_center_5fcluster_2eproto();

  void InitAsDefaultInstance();
  static CenterResponseCluster* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcClusterServer

// optional .libevrpc.ClusteAction cluster_action = 1;
inline bool RpcClusterServer::has_cluster_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcClusterServer::set_has_cluster_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcClusterServer::clear_has_cluster_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcClusterServer::clear_cluster_action() {
  cluster_action_ = 1;
  clear_has_cluster_action();
}
inline ::libevrpc::ClusteAction RpcClusterServer::cluster_action() const {
  // @@protoc_insertion_point(field_get:libevrpc.RpcClusterServer.cluster_action)
  return static_cast< ::libevrpc::ClusteAction >(cluster_action_);
}
inline void RpcClusterServer::set_cluster_action(::libevrpc::ClusteAction value) {
  assert(::libevrpc::ClusteAction_IsValid(value));
  set_has_cluster_action();
  cluster_action_ = value;
  // @@protoc_insertion_point(field_set:libevrpc.RpcClusterServer.cluster_action)
}

// optional string cluster_server_addr = 2;
inline bool RpcClusterServer::has_cluster_server_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcClusterServer::set_has_cluster_server_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcClusterServer::clear_has_cluster_server_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcClusterServer::clear_cluster_server_addr() {
  if (cluster_server_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_server_addr_->clear();
  }
  clear_has_cluster_server_addr();
}
inline const ::std::string& RpcClusterServer::cluster_server_addr() const {
  // @@protoc_insertion_point(field_get:libevrpc.RpcClusterServer.cluster_server_addr)
  return *cluster_server_addr_;
}
inline void RpcClusterServer::set_cluster_server_addr(const ::std::string& value) {
  set_has_cluster_server_addr();
  if (cluster_server_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_server_addr_ = new ::std::string;
  }
  cluster_server_addr_->assign(value);
  // @@protoc_insertion_point(field_set:libevrpc.RpcClusterServer.cluster_server_addr)
}
inline void RpcClusterServer::set_cluster_server_addr(const char* value) {
  set_has_cluster_server_addr();
  if (cluster_server_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_server_addr_ = new ::std::string;
  }
  cluster_server_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:libevrpc.RpcClusterServer.cluster_server_addr)
}
inline void RpcClusterServer::set_cluster_server_addr(const char* value, size_t size) {
  set_has_cluster_server_addr();
  if (cluster_server_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_server_addr_ = new ::std::string;
  }
  cluster_server_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libevrpc.RpcClusterServer.cluster_server_addr)
}
inline ::std::string* RpcClusterServer::mutable_cluster_server_addr() {
  set_has_cluster_server_addr();
  if (cluster_server_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_server_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:libevrpc.RpcClusterServer.cluster_server_addr)
  return cluster_server_addr_;
}
inline ::std::string* RpcClusterServer::release_cluster_server_addr() {
  clear_has_cluster_server_addr();
  if (cluster_server_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cluster_server_addr_;
    cluster_server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcClusterServer::set_allocated_cluster_server_addr(::std::string* cluster_server_addr) {
  if (cluster_server_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_server_addr_;
  }
  if (cluster_server_addr) {
    set_has_cluster_server_addr();
    cluster_server_addr_ = cluster_server_addr;
  } else {
    clear_has_cluster_server_addr();
    cluster_server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:libevrpc.RpcClusterServer.cluster_server_addr)
}

// optional uint32 load = 3;
inline bool RpcClusterServer::has_load() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcClusterServer::set_has_load() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcClusterServer::clear_has_load() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcClusterServer::clear_load() {
  load_ = 0u;
  clear_has_load();
}
inline ::google::protobuf::uint32 RpcClusterServer::load() const {
  // @@protoc_insertion_point(field_get:libevrpc.RpcClusterServer.load)
  return load_;
}
inline void RpcClusterServer::set_load(::google::protobuf::uint32 value) {
  set_has_load();
  load_ = value;
  // @@protoc_insertion_point(field_set:libevrpc.RpcClusterServer.load)
}

// optional float cpu_used = 4;
inline bool RpcClusterServer::has_cpu_used() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcClusterServer::set_has_cpu_used() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcClusterServer::clear_has_cpu_used() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcClusterServer::clear_cpu_used() {
  cpu_used_ = 0;
  clear_has_cpu_used();
}
inline float RpcClusterServer::cpu_used() const {
  // @@protoc_insertion_point(field_get:libevrpc.RpcClusterServer.cpu_used)
  return cpu_used_;
}
inline void RpcClusterServer::set_cpu_used(float value) {
  set_has_cpu_used();
  cpu_used_ = value;
  // @@protoc_insertion_point(field_set:libevrpc.RpcClusterServer.cpu_used)
}

// optional int32 connection_num = 5;
inline bool RpcClusterServer::has_connection_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcClusterServer::set_has_connection_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcClusterServer::clear_has_connection_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcClusterServer::clear_connection_num() {
  connection_num_ = 0;
  clear_has_connection_num();
}
inline ::google::protobuf::int32 RpcClusterServer::connection_num() const {
  // @@protoc_insertion_point(field_get:libevrpc.RpcClusterServer.connection_num)
  return connection_num_;
}
inline void RpcClusterServer::set_connection_num(::google::protobuf::int32 value) {
  set_has_connection_num();
  connection_num_ = value;
  // @@protoc_insertion_point(field_set:libevrpc.RpcClusterServer.connection_num)
}

// -------------------------------------------------------------------

// CenterResponseCluster

// optional .libevrpc.ResponseClusterAction center_response_action = 1;
inline bool CenterResponseCluster::has_center_response_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CenterResponseCluster::set_has_center_response_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CenterResponseCluster::clear_has_center_response_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CenterResponseCluster::clear_center_response_action() {
  center_response_action_ = 1;
  clear_has_center_response_action();
}
inline ::libevrpc::ResponseClusterAction CenterResponseCluster::center_response_action() const {
  // @@protoc_insertion_point(field_get:libevrpc.CenterResponseCluster.center_response_action)
  return static_cast< ::libevrpc::ResponseClusterAction >(center_response_action_);
}
inline void CenterResponseCluster::set_center_response_action(::libevrpc::ResponseClusterAction value) {
  assert(::libevrpc::ResponseClusterAction_IsValid(value));
  set_has_center_response_action();
  center_response_action_ = value;
  // @@protoc_insertion_point(field_set:libevrpc.CenterResponseCluster.center_response_action)
}

// repeated string should_reporter_center = 2;
inline int CenterResponseCluster::should_reporter_center_size() const {
  return should_reporter_center_.size();
}
inline void CenterResponseCluster::clear_should_reporter_center() {
  should_reporter_center_.Clear();
}
inline const ::std::string& CenterResponseCluster::should_reporter_center(int index) const {
  // @@protoc_insertion_point(field_get:libevrpc.CenterResponseCluster.should_reporter_center)
  return should_reporter_center_.Get(index);
}
inline ::std::string* CenterResponseCluster::mutable_should_reporter_center(int index) {
  // @@protoc_insertion_point(field_mutable:libevrpc.CenterResponseCluster.should_reporter_center)
  return should_reporter_center_.Mutable(index);
}
inline void CenterResponseCluster::set_should_reporter_center(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:libevrpc.CenterResponseCluster.should_reporter_center)
  should_reporter_center_.Mutable(index)->assign(value);
}
inline void CenterResponseCluster::set_should_reporter_center(int index, const char* value) {
  should_reporter_center_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:libevrpc.CenterResponseCluster.should_reporter_center)
}
inline void CenterResponseCluster::set_should_reporter_center(int index, const char* value, size_t size) {
  should_reporter_center_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libevrpc.CenterResponseCluster.should_reporter_center)
}
inline ::std::string* CenterResponseCluster::add_should_reporter_center() {
  return should_reporter_center_.Add();
}
inline void CenterResponseCluster::add_should_reporter_center(const ::std::string& value) {
  should_reporter_center_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:libevrpc.CenterResponseCluster.should_reporter_center)
}
inline void CenterResponseCluster::add_should_reporter_center(const char* value) {
  should_reporter_center_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:libevrpc.CenterResponseCluster.should_reporter_center)
}
inline void CenterResponseCluster::add_should_reporter_center(const char* value, size_t size) {
  should_reporter_center_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:libevrpc.CenterResponseCluster.should_reporter_center)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CenterResponseCluster::should_reporter_center() const {
  // @@protoc_insertion_point(field_list:libevrpc.CenterResponseCluster.should_reporter_center)
  return should_reporter_center_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CenterResponseCluster::mutable_should_reporter_center() {
  // @@protoc_insertion_point(field_mutable_list:libevrpc.CenterResponseCluster.should_reporter_center)
  return &should_reporter_center_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace libevrpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::libevrpc::ClusteAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libevrpc::ClusteAction>() {
  return ::libevrpc::ClusteAction_descriptor();
}
template <> struct is_proto_enum< ::libevrpc::ResponseClusterAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libevrpc::ResponseClusterAction>() {
  return ::libevrpc::ResponseClusterAction_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_5fcluster_2eproto__INCLUDED
