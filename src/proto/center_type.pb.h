// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center_type.proto

#ifndef PROTOBUF_center_5ftype_2eproto__INCLUDED
#define PROTOBUF_center_5ftype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace libevrpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_5ftype_2eproto();
void protobuf_AssignDesc_center_5ftype_2eproto();
void protobuf_ShutdownFile_center_5ftype_2eproto();


enum CenterType {
  CENTER2CENTER = 100,
  CENTER2CLIENT = 101,
  CENTER2CLUSTER = 102
};
bool CenterType_IsValid(int value);
const CenterType CenterType_MIN = CENTER2CENTER;
const CenterType CenterType_MAX = CENTER2CLUSTER;
const int CenterType_ARRAYSIZE = CenterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CenterType_descriptor();
inline const ::std::string& CenterType_Name(CenterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CenterType_descriptor(), value);
}
inline bool CenterType_Parse(
    const ::std::string& name, CenterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CenterType>(
    CenterType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace libevrpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::libevrpc::CenterType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libevrpc::CenterType>() {
  return ::libevrpc::CenterType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_5ftype_2eproto__INCLUDED
