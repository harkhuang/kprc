// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center_client.proto

#ifndef PROTOBUF_center_5fclient_2eproto__INCLUDED
#define PROTOBUF_center_5fclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "center_type.pb.h"
// @@protoc_insertion_point(includes)

namespace libevrpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_5fclient_2eproto();
void protobuf_AssignDesc_center_5fclient_2eproto();
void protobuf_ShutdownFile_center_5fclient_2eproto();

class ClientWithCenter;

enum ClientClusterAction {
  CLIENT_INIT_REQ = 1,
  UPDATE_SERVER_INFO = 2,
  CENTER_RESP_OK = 3,
  CENTER_RESP_ERR = 4
};
bool ClientClusterAction_IsValid(int value);
const ClientClusterAction ClientClusterAction_MIN = CLIENT_INIT_REQ;
const ClientClusterAction ClientClusterAction_MAX = CENTER_RESP_ERR;
const int ClientClusterAction_ARRAYSIZE = ClientClusterAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientClusterAction_descriptor();
inline const ::std::string& ClientClusterAction_Name(ClientClusterAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientClusterAction_descriptor(), value);
}
inline bool ClientClusterAction_Parse(
    const ::std::string& name, ClientClusterAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientClusterAction>(
    ClientClusterAction_descriptor(), name, value);
}
// ===================================================================

class ClientWithCenter : public ::google::protobuf::Message {
 public:
  ClientWithCenter();
  virtual ~ClientWithCenter();

  ClientWithCenter(const ClientWithCenter& from);

  inline ClientWithCenter& operator=(const ClientWithCenter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientWithCenter& default_instance();

  void Swap(ClientWithCenter* other);

  // implements Message ----------------------------------------------

  ClientWithCenter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientWithCenter& from);
  void MergeFrom(const ClientWithCenter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string from_addr = 1;
  inline bool has_from_addr() const;
  inline void clear_from_addr();
  static const int kFromAddrFieldNumber = 1;
  inline const ::std::string& from_addr() const;
  inline void set_from_addr(const ::std::string& value);
  inline void set_from_addr(const char* value);
  inline void set_from_addr(const char* value, size_t size);
  inline ::std::string* mutable_from_addr();
  inline ::std::string* release_from_addr();
  inline void set_allocated_from_addr(::std::string* from_addr);

  // optional .libevrpc.ClientClusterAction client_center_action = 2;
  inline bool has_client_center_action() const;
  inline void clear_client_center_action();
  static const int kClientCenterActionFieldNumber = 2;
  inline ::libevrpc::ClientClusterAction client_center_action() const;
  inline void set_client_center_action(::libevrpc::ClientClusterAction value);

  // repeated string should_communicate_center = 3;
  inline int should_communicate_center_size() const;
  inline void clear_should_communicate_center();
  static const int kShouldCommunicateCenterFieldNumber = 3;
  inline const ::std::string& should_communicate_center(int index) const;
  inline ::std::string* mutable_should_communicate_center(int index);
  inline void set_should_communicate_center(int index, const ::std::string& value);
  inline void set_should_communicate_center(int index, const char* value);
  inline void set_should_communicate_center(int index, const char* value, size_t size);
  inline ::std::string* add_should_communicate_center();
  inline void add_should_communicate_center(const ::std::string& value);
  inline void add_should_communicate_center(const char* value);
  inline void add_should_communicate_center(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& should_communicate_center() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_should_communicate_center();

  // repeated string cluster_server_list = 4;
  inline int cluster_server_list_size() const;
  inline void clear_cluster_server_list();
  static const int kClusterServerListFieldNumber = 4;
  inline const ::std::string& cluster_server_list(int index) const;
  inline ::std::string* mutable_cluster_server_list(int index);
  inline void set_cluster_server_list(int index, const ::std::string& value);
  inline void set_cluster_server_list(int index, const char* value);
  inline void set_cluster_server_list(int index, const char* value, size_t size);
  inline ::std::string* add_cluster_server_list();
  inline void add_cluster_server_list(const ::std::string& value);
  inline void add_cluster_server_list(const char* value);
  inline void add_cluster_server_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cluster_server_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cluster_server_list();

  // @@protoc_insertion_point(class_scope:libevrpc.ClientWithCenter)
 private:
  inline void set_has_from_addr();
  inline void clear_has_from_addr();
  inline void set_has_client_center_action();
  inline void clear_has_client_center_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* from_addr_;
  ::google::protobuf::RepeatedPtrField< ::std::string> should_communicate_center_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cluster_server_list_;
  int client_center_action_;
  friend void  protobuf_AddDesc_center_5fclient_2eproto();
  friend void protobuf_AssignDesc_center_5fclient_2eproto();
  friend void protobuf_ShutdownFile_center_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ClientWithCenter* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientWithCenter

// optional string from_addr = 1;
inline bool ClientWithCenter::has_from_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientWithCenter::set_has_from_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientWithCenter::clear_has_from_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientWithCenter::clear_from_addr() {
  if (from_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_addr_->clear();
  }
  clear_has_from_addr();
}
inline const ::std::string& ClientWithCenter::from_addr() const {
  // @@protoc_insertion_point(field_get:libevrpc.ClientWithCenter.from_addr)
  return *from_addr_;
}
inline void ClientWithCenter::set_from_addr(const ::std::string& value) {
  set_has_from_addr();
  if (from_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_addr_ = new ::std::string;
  }
  from_addr_->assign(value);
  // @@protoc_insertion_point(field_set:libevrpc.ClientWithCenter.from_addr)
}
inline void ClientWithCenter::set_from_addr(const char* value) {
  set_has_from_addr();
  if (from_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_addr_ = new ::std::string;
  }
  from_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:libevrpc.ClientWithCenter.from_addr)
}
inline void ClientWithCenter::set_from_addr(const char* value, size_t size) {
  set_has_from_addr();
  if (from_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_addr_ = new ::std::string;
  }
  from_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libevrpc.ClientWithCenter.from_addr)
}
inline ::std::string* ClientWithCenter::mutable_from_addr() {
  set_has_from_addr();
  if (from_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:libevrpc.ClientWithCenter.from_addr)
  return from_addr_;
}
inline ::std::string* ClientWithCenter::release_from_addr() {
  clear_has_from_addr();
  if (from_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_addr_;
    from_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientWithCenter::set_allocated_from_addr(::std::string* from_addr) {
  if (from_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_addr_;
  }
  if (from_addr) {
    set_has_from_addr();
    from_addr_ = from_addr;
  } else {
    clear_has_from_addr();
    from_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:libevrpc.ClientWithCenter.from_addr)
}

// optional .libevrpc.ClientClusterAction client_center_action = 2;
inline bool ClientWithCenter::has_client_center_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientWithCenter::set_has_client_center_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientWithCenter::clear_has_client_center_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientWithCenter::clear_client_center_action() {
  client_center_action_ = 1;
  clear_has_client_center_action();
}
inline ::libevrpc::ClientClusterAction ClientWithCenter::client_center_action() const {
  // @@protoc_insertion_point(field_get:libevrpc.ClientWithCenter.client_center_action)
  return static_cast< ::libevrpc::ClientClusterAction >(client_center_action_);
}
inline void ClientWithCenter::set_client_center_action(::libevrpc::ClientClusterAction value) {
  assert(::libevrpc::ClientClusterAction_IsValid(value));
  set_has_client_center_action();
  client_center_action_ = value;
  // @@protoc_insertion_point(field_set:libevrpc.ClientWithCenter.client_center_action)
}

// repeated string should_communicate_center = 3;
inline int ClientWithCenter::should_communicate_center_size() const {
  return should_communicate_center_.size();
}
inline void ClientWithCenter::clear_should_communicate_center() {
  should_communicate_center_.Clear();
}
inline const ::std::string& ClientWithCenter::should_communicate_center(int index) const {
  // @@protoc_insertion_point(field_get:libevrpc.ClientWithCenter.should_communicate_center)
  return should_communicate_center_.Get(index);
}
inline ::std::string* ClientWithCenter::mutable_should_communicate_center(int index) {
  // @@protoc_insertion_point(field_mutable:libevrpc.ClientWithCenter.should_communicate_center)
  return should_communicate_center_.Mutable(index);
}
inline void ClientWithCenter::set_should_communicate_center(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:libevrpc.ClientWithCenter.should_communicate_center)
  should_communicate_center_.Mutable(index)->assign(value);
}
inline void ClientWithCenter::set_should_communicate_center(int index, const char* value) {
  should_communicate_center_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:libevrpc.ClientWithCenter.should_communicate_center)
}
inline void ClientWithCenter::set_should_communicate_center(int index, const char* value, size_t size) {
  should_communicate_center_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libevrpc.ClientWithCenter.should_communicate_center)
}
inline ::std::string* ClientWithCenter::add_should_communicate_center() {
  return should_communicate_center_.Add();
}
inline void ClientWithCenter::add_should_communicate_center(const ::std::string& value) {
  should_communicate_center_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:libevrpc.ClientWithCenter.should_communicate_center)
}
inline void ClientWithCenter::add_should_communicate_center(const char* value) {
  should_communicate_center_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:libevrpc.ClientWithCenter.should_communicate_center)
}
inline void ClientWithCenter::add_should_communicate_center(const char* value, size_t size) {
  should_communicate_center_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:libevrpc.ClientWithCenter.should_communicate_center)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientWithCenter::should_communicate_center() const {
  // @@protoc_insertion_point(field_list:libevrpc.ClientWithCenter.should_communicate_center)
  return should_communicate_center_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ClientWithCenter::mutable_should_communicate_center() {
  // @@protoc_insertion_point(field_mutable_list:libevrpc.ClientWithCenter.should_communicate_center)
  return &should_communicate_center_;
}

// repeated string cluster_server_list = 4;
inline int ClientWithCenter::cluster_server_list_size() const {
  return cluster_server_list_.size();
}
inline void ClientWithCenter::clear_cluster_server_list() {
  cluster_server_list_.Clear();
}
inline const ::std::string& ClientWithCenter::cluster_server_list(int index) const {
  // @@protoc_insertion_point(field_get:libevrpc.ClientWithCenter.cluster_server_list)
  return cluster_server_list_.Get(index);
}
inline ::std::string* ClientWithCenter::mutable_cluster_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:libevrpc.ClientWithCenter.cluster_server_list)
  return cluster_server_list_.Mutable(index);
}
inline void ClientWithCenter::set_cluster_server_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:libevrpc.ClientWithCenter.cluster_server_list)
  cluster_server_list_.Mutable(index)->assign(value);
}
inline void ClientWithCenter::set_cluster_server_list(int index, const char* value) {
  cluster_server_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:libevrpc.ClientWithCenter.cluster_server_list)
}
inline void ClientWithCenter::set_cluster_server_list(int index, const char* value, size_t size) {
  cluster_server_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libevrpc.ClientWithCenter.cluster_server_list)
}
inline ::std::string* ClientWithCenter::add_cluster_server_list() {
  return cluster_server_list_.Add();
}
inline void ClientWithCenter::add_cluster_server_list(const ::std::string& value) {
  cluster_server_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:libevrpc.ClientWithCenter.cluster_server_list)
}
inline void ClientWithCenter::add_cluster_server_list(const char* value) {
  cluster_server_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:libevrpc.ClientWithCenter.cluster_server_list)
}
inline void ClientWithCenter::add_cluster_server_list(const char* value, size_t size) {
  cluster_server_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:libevrpc.ClientWithCenter.cluster_server_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientWithCenter::cluster_server_list() const {
  // @@protoc_insertion_point(field_list:libevrpc.ClientWithCenter.cluster_server_list)
  return cluster_server_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ClientWithCenter::mutable_cluster_server_list() {
  // @@protoc_insertion_point(field_mutable_list:libevrpc.ClientWithCenter.cluster_server_list)
  return &cluster_server_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace libevrpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::libevrpc::ClientClusterAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libevrpc::ClientClusterAction>() {
  return ::libevrpc::ClientClusterAction_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_5fclient_2eproto__INCLUDED
